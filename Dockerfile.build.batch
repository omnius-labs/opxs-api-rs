FROM public.ecr.aws/lambda/provided:al2 AS chef

WORKDIR /app

RUN yum install -y \
    gcc \
    openssl-devel \
    pkg-config \
    && rm -rf /var/cache/yum/* \
    && yum clean all

COPY ./rust-toolchain ./rust-toolchain

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH

RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain "$(cat ./rust-toolchain)"

RUN cargo install cargo-chef --locked

FROM chef AS planner

# Copy
COPY ./modules ./modules
COPY ./refs ./refs
COPY Cargo.* .

RUN cargo chef prepare --recipe-path recipe.json

FROM chef AS builder

COPY --from=planner /app/recipe.json recipe.json

# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --release --recipe-path recipe.json

# Copy
COPY ./.git ./.git
COPY ./modules ./modules
COPY ./refs ./refs
COPY Cargo.* .

# Build application
RUN cargo build --release --bin opxs-batch-send-email --bin opxs-batch-send-email-feedback

# We do not need the Rust toolchain to run the binary!
FROM chef AS runtime

WORKDIR /app

COPY --from=builder /app/target/release/opxs-batch-send-email ./opxs-batch-send-email
COPY --from=builder /app/target/release/opxs-batch-send-email-feedback ./opxs-batch-send-email-feedback
